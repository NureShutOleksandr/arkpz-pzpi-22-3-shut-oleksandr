Харківський національний університет радіоелектроніки
Факультет комп'ютерних наук
Катедра програмної інженерії



ЗВІТ
до лабораторної роботи №2
з дисципліни  «Аналіз та рефакторинг коду»
на тему: «РОЗРОБКА БАЗИ ДАНИХ ДЛЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ ТА ПРИКЛАДНОГО ПРОГРАМНОГО ІНТЕРФЕЙСУ (API)»




Виконав
ст. гр. ПЗПІ-22-3
Шуть Олександр Вікторович

Перевірив
ст. викладач катедри ПІ
Сокорчук Ігор Петрович





Харків 2024

1 МЕТА РОБОТИ

     Метою роботи є розробити базу даних для серверної частини та прикладного програмного інтерфейсу для програмної системи кліматичного комфорту та психоемоційного балансу.

2 ХІД РОБОТИ

	Процес виконання лабораторної роботи розпочався з ретельного проектування системи, основою якого стало створення UML-діаграми прецедентів для програмної системи кліматичного комфорту та психоемоційного балансу. Дана система передбачає широкий спектр функціональних можливостей, що охоплюють як базові, так і спеціалізовані задачі. Для забезпечення структурованості та деталізації, діаграма прецедентів була розділена на кілька окремих частин, які представлені в Додатку А.
     Другим етапом стало створення ER-діаграми. Вона наочно демонструє зв’язки між сутностями системи і закладає фундамент для подальшого моделювання даних. Побудована ER-діаграма представлена в Додатку Б. На основі отриманої ER-діаграми була розроблена база даних, структура якої відображена у вигляді діаграми в Додатку В.
	Наступним кроком стало створення API для забезпечення взаємодії між серверною частиною системи та клієнтами. Для документування і стандартизації API була підготовлена Swagger-специфікація, наведена в Додатку Г. Ця специфікація забезпечує детальний опис усіх ендпоінтів, їх вхідних параметрів, типів даних і очікуваних відповідей, сприяючи прозорості та зручності інтеграції з клієнтськими застосунками.
     Приклади коду серверної частини, які ілюструють ключові аспекти реалізації системи, наведено в Додатку Д. Для забезпечення доступності та зручності перегляду, повний вихідний код проєкту було завантажено на платформі GitHub. Під час розробки API було прийнято кілька важливих інженерних рішень, які забезпечують стабільність і гнучкість системи:
     1. Серверна частина створена на основі фреймворку Nest.js з використанням модульної архітектури. Кожен модуль є незалежною складовою додатка, що поєднує контролер та сервіс для реалізації конкретної функціональності. Такий підхід дозволяє легко масштабувати систему, імпортувати необхідні моделі для роботи з базою даних і експортувати сервіси для використання в інших модулях.
     2. Для роботи з базою даних обрано ODM (Object Document Mapping) mongoose, яка забезпечує гнучке управління даними та спрощує процеси внесення змін. 
     3. У якості системи управління базами даних використано MongoDB, яка розміщена в хмарному середовищі. Це дозволяє зберігати дані віддалено, забезпечуючи зручність та покращуючи загальну продуктивність проєкту.

ВИСНОВКИ

     У процесі виконання лабораторної роботи було досягнуто основної мети – створення серверної частини та прикладного програмного інтерфейсу для програмної системи кліматичного комфорту та психоемоційного балансу, яка відповідає сучасним вимогам якості та функціональності. Послідовність етапів, починаючи з побудови UML-діаграми прецедентів і закінчуючи розробкою API та його документуванням, дозволила забезпечити структурованість і ефективність розробки.
     Використання фреймворку Nest.js із модульною архітектурою сприяло високій гнучкості системи та її легкому масштабуванню, а впровадження ODM mongoose дозволило ефективно працювати з MongoDB, яка була обрана як основна система управління даними. Хмарне розміщення бази даних забезпечило зручність віддаленого доступу та підвищило продуктивність, що є важливим аспектом у сучасних програмних рішеннях.
     Документування API за допомогою Swagger забезпечило прозорість розробленої системи, полегшивши її інтеграцію з клієнтськими застосунками. Представлення коду на платформі GitHub підвищує доступність проєкту та його готовність до подальшого розвитку. Загалом, лабораторна робота продемонструвала використання сучасних підходів до проєктування програмних систем, що сприяє створенню масштабованих, стабільних і ефективних рішень.

ДОДАТОК А
UML діаграма прецедентів
 

Рисунок А – UML діаграма прецедентів
ДОДАТОК Б
ER діаграма бази даних 


Рисунок Б – ER діаграма бази даних
ДОДАТОК В
Діаграма структури бази даних


Рисунок В – Діаграма структури бази даних

ДОДАТОК Г
Специфікація API


Рисунок Г – Специфікація API
ДОДАТОК Д
Приклад програмного коду (auth.controller.ts)

01 import { AuthService } from './auth.service'
02 import { Body, Controller, HttpCode, HttpStatus, Post, Req, Res, UsePipes } from '@nestjs/common'
03 import { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger'
04 import { ValidationPipe } from '../../pipes/validation.pipe'
05 import { CreateUserDto } from '../users/dto/create-user.dto'
06 import { Response, Request } from 'express'
07 import { LoginResponseDto } from './dto/login-response.dto'
08 import { RegisterResponseDto } from './dto/register-response.dto'
09 import { RefreshResponseDto } from './dto/refresh-response.dto'
10 
11 @ApiTags('auth')
12 @Controller('auth')
13 export class AuthController {
14   constructor(private readonly authService: AuthService) {}
15
16   @ApiOperation({ summary: 'user login' })
17   @ApiResponse({ status: 200, type: LoginResponseDto })
18   @UsePipes(ValidationPipe)
19   @Post('/login')
20   @HttpCode(HttpStatus.OK)
21   async login(@Body() dto: CreateUserDto, @Res() res: Response): Promise<void> {
22     const { accessToken } = await this.authService.login(dto)
23
24     res.cookie('accessToken', accessToken, {
25       httpOnly: true,
26       secure: process.env.NODE_ENV === 'production',
27       sameSite: 'strict',
28     })
29     res.send({ message: 'Login successful', token: { accessToken } })
30   }
31
32   @ApiOperation({ summary: 'user register' })
33   @ApiResponse({ status: 200, type: RegisterResponseDto })
34   @UsePipes(ValidationPipe)
35   @Post('/registration')
36   @HttpCode(HttpStatus.CREATED)
37   async registration(@Body() userDto: CreateUserDto, @Res() res: Response): Promise<void> {
38     const { accessToken } = await this.authService.registration(userDto)
39
40     res.cookie('accessToken', accessToken, {
41       httpOnly: true,
42       secure: process.env.NODE_ENV === 'production',
43       sameSite: 'strict',
44     })
45
46     res.send({ message: 'Registration successful', token: { accessToken } })
47   }
48
49   @ApiOperation({ summary: 'refresh access token' })
50   @ApiResponse({ status: 200, type: RefreshResponseDto })
51   @Post('/refresh')
52   @HttpCode(HttpStatus.OK)
53   async refresh(@Req() req: Request, @Res() res: Response): Promise<void> {
54     const accessTokenFromReq = req.cookies['accessToken']
55
56     const { accessToken } = await this.authService.refreshToken(accessTokenFromReq)
57
58     res.cookie('accessToken', accessToken, {
59       httpOnly: true,
60       secure: process.env.NODE_ENV === 'production',
61       sameSite: 'strict',
62     })
63     res.send({ message: 'Token updated', token: { accessToken } })
64   }
65 }
ДОДАТОК Е
Відео-посилання на Youtube

 Посилання: https://youtu.be/wHNato6fmyw
 
 
 


